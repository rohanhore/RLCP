geom_line()+geom_point()+
scale_linetype_manual(values=c("Linear Model"="dashed","Random Forest"="longdash","Neural Net"="dotdash"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Base Method")+
ggtitle("Deviation D(h) of RLCP in real data setting")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
gridExtra::grid.arrange(deviation_simul,deviation_real,ncol=2)
deviation_real
deviation_real=ggplot(deviation_real_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("Linear Model"="dashed","Random Forest"="dotted","Neural Net"="dotdash"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Base Method")+
ggtitle("Deviation D(h) of RLCP in real data setting")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_real
#--------------------------------------------------------------
#---------------------------visualization----------------------
#--------------------------------------------------------------
deviation_est=read.csv("../results/simul_deviation_estimates.csv")[,-1]
deviation_simul_df=c(unlist(deviation_est[1,]),unlist(deviation_est[2,]))
deviation_simul_df=cbind(deviation_simul_df,rep(hseq,2))
deviation_simul_df=cbind(deviation_simul_df,rep(c(1,2),each=length(hseq)))
hseq=seq(0.1,2.1,by=0.2)
deviation_simul_df=c(unlist(deviation_est[1,]),unlist(deviation_est[2,]))
deviation_simul_df=cbind(deviation_simul_df,rep(hseq,2))
deviation_simul_df=cbind(deviation_simul_df,rep(c(1,2),each=length(hseq)))
deviation_simul_df=as.data.frame(deviation_simul_df)
colnames(deviation_simul_df)=c("deviation","h","setting")
deviation_simul_df$setting=as.factor(deviation_simul_df$setting)
deviation_simul_df$deviation=as.numeric(deviation_simul_df$deviation)
deviation_simul_df$h=as.numeric(deviation_simul_df$h)
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_simul
pdf(file = "../results/RLCP_deviation.pdf",width = 13.5, height = 5)
gridExtra::grid.arrange(deviation_simul,deviation_real,ncol=2)
dev.off()
pdf(file = "../results/figures/RLCP_deviation.pdf",width = 13.5, height = 5)
gridExtra::grid.arrange(deviation_simul,deviation_real,ncol=2)
dev.off()
deviation_real
deviation_real=ggplot(deviation_real_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("Linear Model"="dashed","Random Forest"="dotted","Neural Net"="dotdash"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Base Method")+
ggtitle("Deviation D(h) of RLCP in real data setting")+
theme(axis.title = element_text(size = 16),
axis.text=element_text(size=16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
library(ggplot2)
deviation_real=ggplot(deviation_real_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("Linear Model"="dashed","Random Forest"="dotted","Neural Net"="dotdash"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Base Method")+
ggtitle("Deviation D(h) of RLCP in real data setting")+
theme(axis.title = element_text(size = 16),
axis.text=element_text(size=16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
pdf(file = "../results/figures/RLCP_deviation.pdf",width = 13.5, height = 5)
gridExtra::grid.arrange(deviation_simul,deviation_real,ncol=2)
dev.off()
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size=16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_simul
pdf(file = "../results/figures/RLCP_deviation.pdf",width = 13.5, height = 5)
gridExtra::grid.arrange(deviation_simul,deviation_real,ncol=2)
dev.off()
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
suppressPackageStartupMessages(library(gridExtra))
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
plot4=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = bmi, y = coverage,color=CP_method)) +
geom_line() +
geom_hline(yintercept=0.9,linetype="dashed")+
xlab("BMI quantile")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(h~ `base method` ,labeller=label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=14),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14))+
labs(color="Method",x="BMI Quantile",y="Local Coverage")
plot4
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=14),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14))+
labs(fill="Smoker",x="Method",y="Coverage")
plot3
#---------------across smoking groups------------------
plot_result=matrix(0,ncol=5,nrow=2*9*length(hseq))
for(i in 1:length(hseq)){
id=(2*9*(i-1)+1):(2*9*i)
res=stack(as.data.frame(real_result[[i]][[4]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=2),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=2*3)
plot_result[id,4]=rep(c(0,1),9)
plot_result[id,5]=hseq[i]
}
#bandwidth choices
hseq=2:8
#---------------across smoking groups------------------
plot_result=matrix(0,ncol=5,nrow=2*9*length(hseq))
for(i in 1:length(hseq)){
id=(2*9*(i-1)+1):(2*9*i)
res=stack(as.data.frame(real_result[[i]][[4]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=2),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=2*3)
plot_result[id,4]=rep(c(0,1),9)
plot_result[id,5]=hseq[i]
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base method","smoker","h")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$h=as.numeric(plot_result$h)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=14),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14))+
labs(fill="Smoker",x="Method",y="Coverage")
plot3
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 13, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 15, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=12),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14))+
labs(fill="Smoker",x="Method",y="Coverage")
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 15, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=12),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14),
strip.text = element_text(size=14))+
labs(fill="Smoker",x="Method",y="Coverage")
plot3
#-------------across BMI bins-------------------------
bmi_quantiles=seq(0.125,0.875,by=0.01);len_q=length(bmi_quantiles)
plot_result=matrix(0,ncol=5,nrow=len_q*9*length(hseq))
for(i in 1:length(hseq)){
id=(len_q*9*(i-1)+1):(len_q*9*i)
res=stack(as.data.frame(real_result[[i]][[3]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=len_q),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=len_q*3)
plot_result[id,4]=rep(bmi_quantiles,9)
plot_result[id,5]=hseq[i]
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base method","bmi","h")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$bmi=as.numeric(plot_result$bmi)
plot_result$h=as.numeric(plot_result$h)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot4=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = bmi, y = coverage,color=CP_method)) +
geom_line() +
geom_hline(yintercept=0.9,linetype="dashed")+
xlab("BMI quantile")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(h~ `base method` ,labeller=label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 14),
axis.text=element_text(size=14),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=14),
strip.text = element_text(size=14))+
labs(color="Method",x="BMI Quantile",y="Local Coverage")
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
pdf(file = "../results/figures/realdata_conditional_results.eps",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(ggplot2))
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
setEPS()
postscript(file = "../results/figures/realdata_conditional_results.pdf",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
pdf(file = "../results/figures/realdata_conditional_results.pdf",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
setEPS()
postscript(file = "../results/figures/realdata_conditional_results.eps",width = 16, height = 5)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
setEPS()
postscript(file = "../results/figures/realdata_conditional_results.eps",width = 16, height = 8)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
postscript(file = "../results/figures/realdata_conditional_results.eps",width = 15, height = 7)
grid.arrange(plot3,plot4,ncol=2,widths=c(2.6,3))
dev.off()
setEPS()
postscript(file = "../results/figures/realdata_marginal_results.eps",width = 10, height = 4)
grid.arrange(plot1,plot2,ncol=2,widths=c(2.6,3))
dev.off()
postscript(file = "../results/figures/realdata_marginal_results.eps",width = 12, height = 5)
grid.arrange(plot1,plot2,ncol=2,widths=c(2.6,3))
dev.off()
plot3
pdf(file="/Users/rohanhore/Downloads/real_cond.pdf",width=8,height=5)
plot3
dev.off()
plot3
grid.arrange(plot3,plot4,nrow=2,widths=c(5,3))
library(gridExtra)
grid.arrange(plot3,plot4,nrow=2,widths=c(5,3))
grid.arrange(plot3,plot4,nrow=2,ncol=1,widths=c(5,3))
grid.arrange(plot3,plot4,nrow=2,lengths=c(2.5,2.5))
?grid.arrange
grid.arrange(plot3,plot4,nrow=2,heights=c(2.5,2.5))
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3),width=3)
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3))
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=18),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(fill="Smoker",x="Method",y="Coverage")
library(ggplot2)
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=18),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(fill="Smoker",x="Method",y="Coverage")
plot4=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = bmi, y = coverage,color=CP_method)) +
geom_line() +
geom_hline(yintercept=0.9,linetype="dashed")+
xlab("BMI quantile")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(h~ `base method` ,labeller=label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=18),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(color="Method",x="BMI Quantile",y="Local Coverage")
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3))
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3))
plot3
#---------------across smoking groups------------------
plot_result=matrix(0,ncol=5,nrow=2*9*length(hseq))
for(i in 1:length(hseq)){
id=(2*9*(i-1)+1):(2*9*i)
res=stack(as.data.frame(real_result[[i]][[4]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=2),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=2*3)
plot_result[id,4]=rep(c(0,1),9)
plot_result[id,5]=hseq[i]
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base method","smoker","h")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$h=as.numeric(plot_result$h)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=18),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(fill="Smoker",x="Method",y="Coverage")
#-------------across BMI bins-------------------------
bmi_quantiles=seq(0.125,0.875,by=0.01);len_q=length(bmi_quantiles)
plot_result=matrix(0,ncol=5,nrow=len_q*9*length(hseq))
for(i in 1:length(hseq)){
id=(len_q*9*(i-1)+1):(len_q*9*i)
res=stack(as.data.frame(real_result[[i]][[3]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=len_q),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=len_q*3)
plot_result[id,4]=rep(bmi_quantiles,9)
plot_result[id,5]=hseq[i]
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base method","bmi","h")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$bmi=as.numeric(plot_result$bmi)
plot_result$h=as.numeric(plot_result$h)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot4=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = bmi, y = coverage,color=CP_method)) +
geom_line() +
geom_hline(yintercept=0.9,linetype="dashed")+
xlab("BMI quantile")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(h~ `base method` ,labeller=label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=18),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(color="Method",x="BMI Quantile",y="Local Coverage")
plot3
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3))
#---------------across smoking groups------------------
plot_result=matrix(0,ncol=5,nrow=2*9*length(hseq))
for(i in 1:length(hseq)){
id=(2*9*(i-1)+1):(2*9*i)
res=stack(as.data.frame(real_result[[i]][[4]]))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(rep(c("RLCP","calLCP","baseLCP"),each=2),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=2*3)
plot_result[id,4]=rep(c(0,1),9)
plot_result[id,5]=hseq[i]
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base method","smoker","h")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$h=as.numeric(plot_result$h)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot3=ggplot(plot_result[plot_result$h %in% c(2,6),], aes(x = CP_method, y = coverage,group=smoker,
fill=smoker)) +
geom_col(position='dodge',width=0.5) +
coord_cartesian(ylim=c(0.8,1))+
xlab("LCP method")+
scale_fill_discrete(labels=c("0"="no","1"="yes"))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(h~`base method`,labeller = label_bquote(cols = .(`base method`),rows= h ==.(h)))+
theme(axis.title = element_text(size = 18),
axis.text=element_text(size=14),
plot.title = element_text(hjust = 0.5,size=14),
legend.position = "bottom",
legend.text = element_text(size=18),
strip.text = element_text(size=18))+
labs(fill="Smoker",x="Method",y="Coverage")
plot3
grid.arrange(plot3,plot4,nrow=2,heights=c(3,3))
plot4
pdf(file="/Users/rohanhore/Downloads/real_cond_2.pdf",width=16,height=5)
plot4
dev.off()
pdf(file="/Users/rohanhore/Downloads/real_cond_2.pdf",width=9,height=5)
plot4
dev.off()
plot1
pdf(file="/Users/rohanhore/Downloads/real_cond_2.pdf",width=9,height=5)
plot1
dev.off()
pdf(file="/Users/rohanhore/Downloads/real_cond_2.pdf",width=9,height=5)
plot4
dev.off()
pdf(file="/Users/rohanhore/Downloads/realdata_marginal_results.pdf",width=9,height=5)
plot1
dev.off()
plot_result=matrix(0,ncol=5,nrow=9*length(hseq))
for(i in 1:length(hseq)){
id=(9*(i-1)+1):(9*i)
res=stack(as.data.frame(apply(real_result[[i]][[1]]*nrep,2,mean)))
plot_result[id,1]=res[,1]
plot_result[id,2]=rep(c("RLCP","calLCP","baseLCP"),3)
plot_result[id,3]=rep(c("Linear Model","Random Forest","Neural Net"),each=3)
plot_result[id,4]=hseq[i]
plot_result[id,5]=stack(as.data.frame(apply(real_result[[i]][[1]]*nrep,2,sd)))[,1]/sqrt(nrep)
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","CP_method","base_method","h","se")
plot_result$coverage=as.numeric(plot_result$coverage)
plot_result$h=as.numeric(plot_result$h)
plot_result$se=as.numeric(plot_result$se)
plot_result$CP_method=factor(plot_result$CP_method,level=c('baseLCP','calLCP','RLCP'))
plot1=ggplot(plot_result, aes(x=h, y = coverage, color=CP_method)) +
geom_line() +
geom_point()+
ylim(0.88,0.98)+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(.~base_method)+
scale_x_continuous(n.breaks=3)+
theme(legend.position = "none")+
labs(color="Method",x="Bandwidth h",y="Coverage")
plot1=ggplot(plot_result, aes(x=h, y = coverage, color=CP_method)) +
geom_line() +
geom_point()+
ylim(0.88,0.98)+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(.~base_method)+
scale_x_continuous(n.breaks=3)+
theme(legend.position = "none",
legend.text = element_text(size=14),
strip.text = element_text(size=14),
axis.text = element_text(size=14))+
labs(color="Method",x="Bandwidth h",y="Coverage")
library(ggplot2)
plot1
plot1=ggplot(plot_result, aes(x=h, y = coverage, color=CP_method)) +
geom_line() +
geom_point()+
ylim(0.88,0.98)+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
scale_color_manual(values=c("RLCP"="maroon","calLCP"="gold3","baseLCP"="blue"))+
facet_grid(.~base_method)+
scale_x_continuous(n.breaks=3)+
theme(legend.position = "none",
legend.text = element_text(size=14),
strip.text = element_text(size=14),
axis.text = element_text(size=14))+
labs(color="Method",x="Bandwidth h",y="Coverage")
plot1
pdf(file="/Users/rohanhore/Downloads/realdata_marginal_results.pdf",width=9,height=5)
plot1
dev.off()
