suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(mvtnorm))
#---------------------------------------------------
#-------------------source code---------------------
#---------------------------------------------------
source("../utils/simu_sett.R")
source("../utils/methods.R")
#---------------------------------------------------
#------------------load libraries-------------------
#---------------------------------------------------
suppressPackageStartupMessages(library(doParallel))
suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(mvtnorm))
suppressPackageStartupMessages(library(ggplot2))
#------------------------------------------------------------
#-----------computing marginal coverage of m-rLCP------------
#------------------------------------------------------------
mrand_onerep=function(k,d,setting){
#----------training data and learning score------------
train_data=simulation(ntrain,d,setting)
Xnames=paste("X", 1:d, sep="")
formula=as.formula(paste("Y ~ ", paste(Xnames, collapse= "+")))
model_lm=lm(formula,data=train_data)
#----------calibration data--------------------------
calib_data=simulation(ncalib,d,setting)
Xcalib=as.matrix(calib_data[,-1])
scores_calib=abs(calib_data$Y-predict(model_lm,newdata=calib_data))
#-------------test data------------------------------
test_data=simulation(ntest,d,setting)
Xtest=as.matrix(test_data[,-1])
scores_test=abs(test_data$Y-predict(model_lm,newdata=test_data))
#-----------evaluating the competing methods-----------
m_rLCP_res=m_randomized_LCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
rLCP_res=randomized_LCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha)
#----------coverage-----------------------
coverage1=mean(m_rLCP_res)
coverage2=mean(rLCP_res[,1])
return(c(coverage1,coverage2))
}
#--------------------------------------------------------------------
#-----------------------multivariate experiments---------------------
#--------------------------------------------------------------------
#choice of dimensions
dseq=c(1,5*1:4)
numcores=detectCores()-1
cl=makeCluster(numcores)
registerDoParallel(cl)
hseq=c(0.5,1,1.5)
#setting up the experiments
setting=1;ntrain=2000;ncalib=2000;ntest=2000
nrep=30
result1=matrix(0,nrow=5*4,ncol=6)
id=1
for(j in 1:3){
h=hseq[j]
for(l in 1:5){
d=dseq[l]
print(c(h,d))
result_h=foreach(k=1:nrep,.combine=rbind,
.packages = c("MASS","parallel","doParallel",
"foreach","mvtnorm")) %dopar% {
mrand_onerep(k,d,setting)
}
result1[id,]=c(colMeans(result_h),apply(result_h,2,sd)/sqrt(nrep),d,h)
print(result1[id,])
id=id+1
}
}
#------------------------------------------------------------
#-----------computing marginal coverage of m-rLCP------------
#------------------------------------------------------------
mrand_onerep=function(k,d,setting){
#----------training data and learning score------------
train_data=simulation(ntrain,d,setting)
Xnames=paste("X", 1:d, sep="")
formula=as.formula(paste("Y ~ ", paste(Xnames, collapse= "+")))
model_lm=lm(formula,data=train_data)
#----------calibration data--------------------------
calib_data=simulation(ncalib,d,setting)
Xcalib=as.matrix(calib_data[,-1])
scores_calib=abs(calib_data$Y-predict(model_lm,newdata=calib_data))
#-------------test data------------------------------
test_data=simulation(ntest,d,setting)
Xtest=as.matrix(test_data[,-1])
scores_test=abs(test_data$Y-predict(model_lm,newdata=test_data))
#-----------evaluating the competing methods-----------
m_rLCP_res=mRLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
rLCP_res=randomized_LCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha)
#----------coverage-----------------------
coverage1=mean(m_rLCP_res)
coverage2=mean(rLCP_res[,1])
return(c(coverage1,coverage2))
}
#setting up the experiments
setting=1;ntrain=2000;ncalib=2000;ntest=2000
nrep=30
result1=matrix(0,nrow=5*4,ncol=6)
id=1
for(j in 1:3){
h=hseq[j]
for(l in 1:5){
d=dseq[l]
print(c(h,d))
result_h=foreach(k=1:nrep,.combine=rbind,
.packages = c("MASS","parallel","doParallel",
"foreach","mvtnorm")) %dopar% {
mrand_onerep(k,d,setting)
}
result1[id,]=c(colMeans(result_h),apply(result_h,2,sd)/sqrt(nrep),d,h)
print(result1[id,])
id=id+1
}
}
nrep=30;alpha=0.1
result1=matrix(0,nrow=5*4,ncol=6)
id=1
for(j in 1:3){
h=hseq[j]
for(l in 1:5){
d=dseq[l]
print(c(h,d))
result_h=foreach(k=1:nrep,.combine=rbind,
.packages = c("MASS","parallel","doParallel",
"foreach","mvtnorm")) %dopar% {
mrand_onerep(k,d,setting)
}
result1[id,]=c(colMeans(result_h),apply(result_h,2,sd)/sqrt(nrep),d,h)
print(result1[id,])
id=id+1
}
}
#------------------------------------------------------------
#-----------computing marginal coverage of m-rLCP------------
#------------------------------------------------------------
mrand_onerep=function(k,d,setting){
#----------training data and learning score------------
train_data=simulation(ntrain,d,setting)
Xnames=paste("X", 1:d, sep="")
formula=as.formula(paste("Y ~ ", paste(Xnames, collapse= "+")))
model_lm=lm(formula,data=train_data)
#----------calibration data--------------------------
calib_data=simulation(ncalib,d,setting)
Xcalib=as.matrix(calib_data[,-1])
scores_calib=abs(calib_data$Y-predict(model_lm,newdata=calib_data))
#-------------test data------------------------------
test_data=simulation(ntest,d,setting)
Xtest=as.matrix(test_data[,-1])
scores_test=abs(test_data$Y-predict(model_lm,newdata=test_data))
#-----------evaluating the competing methods-----------
m_rLCP_res=mRLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
rLCP_res=RLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha)
#----------coverage-----------------------
coverage1=mean(m_rLCP_res)
coverage2=mean(rLCP_res[,1])
return(c(coverage1,coverage2))
}
#--------------------------------------------------------------------
#-----------------------multivariate experiments---------------------
#--------------------------------------------------------------------
#choice of dimensions
dseq=c(1,5*1:4)
numcores=detectCores()-1
cl=makeCluster(numcores)
registerDoParallel(cl)
hseq=c(0.5,1,1.5)
#setting up the experiments
setting=1;ntrain=2000;ncalib=2000;ntest=2000
nrep=30;alpha=0.1
result1=matrix(0,nrow=5*4,ncol=6)
id=1
for(j in 1:3){
h=hseq[j]
for(l in 1:5){
d=dseq[l]
print(c(h,d))
result_h=foreach(k=1:nrep,.combine=rbind,
.packages = c("MASS","parallel","doParallel",
"foreach","mvtnorm")) %dopar% {
mrand_onerep(k,d,setting)
}
result1[id,]=c(colMeans(result_h),apply(result_h,2,sd)/sqrt(nrep),d,h)
print(result1[id,])
id=id+1
}
}
#----------training data and learning score------------
train_data=simulation(ntrain,d,setting)
Xnames=paste("X", 1:d, sep="")
formula=as.formula(paste("Y ~ ", paste(Xnames, collapse= "+")))
model_lm=lm(formula,data=train_data)
#----------calibration data--------------------------
calib_data=simulation(ncalib,d,setting)
Xcalib=as.matrix(calib_data[,-1])
scores_calib=abs(calib_data$Y-predict(model_lm,newdata=calib_data))
#-------------test data------------------------------
test_data=simulation(ntest,d,setting)
Xtest=as.matrix(test_data[,-1])
scores_test=abs(test_data$Y-predict(model_lm,newdata=test_data))
#-----------evaluating the competing methods-----------
m_rLCP_res=mRLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
warnings()
head(m_rLCP_res)
#----------coverage-----------------------
coverage1=apply(m_rLCP_res,2,mean)
coverage1
flor(100/10)
floor(100/10)
#---------------------------------------------------
#-----------------------mRLCP-----------------------
#---------------------------------------------------
##-----finding coverage for mrLCP for m=10,20,30,.. largest multiple of 10 before m.
mRLCP=function(Xcalib,scores_calib,Xtest,scores_test,kernel,h,alpha,m){
ntest=dim(Xtest)[1];d=dim(Xtest)[2]
coverage=matrix(0,nrow=ntest,ncol=floor(m/10))
for(i in 1:ntest){
xtest=Xtest[i,];test_score=scores_test[i]
cov_data=rbind(Xcalib,xtest)
scores=c(scores_calib,test_score)
#finding p values for m runs of RLCP.
pval=rep(0,m)
for(k in 1:m){
if(kernel=="gaussian"){
xtilde_test=rmvnorm(1,mean=xtest,sigma=diag(d)*h^2)
weights=dmvnorm(cov_data,mean=xtilde_test,sigma=diag(d)*h^2)
weights=weights/sum(weights)
pval[k]=sum(weights*(scores>test_score))+sum(weights*(scores==test_score))*runif(1)
}
if(kernel=="box"){
xtilde_test=runifball(1,xtest,h)
weights=apply(cov_data,1,FUN=function(x){(euclid_distance(x,xtilde_test)<=h)+0})
weights=weights/sum(weights)
pval[k]=sum(weights*(scores>test_score))+sum(weights*(scores==test_score))*runif(1)
}
}
#p-value aggregation.
p_value=cumsum(apply(matrix(pval,ncol=10),1,mean))/(1:(m/10))
coverage[i,]=(p_value>alpha)+0
}
return(coverage)
}
#-----------evaluating the competing methods-----------
m_rLCP_res=mRLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
#----------coverage-----------------------
coverage1=apply(m_rLCP_res,2,mean)
coverage1
d
h
#---------------------------------------------------
#-------------------source code---------------------
#---------------------------------------------------
source("../utils/simu_sett.R")
source("../utils/methods.R")
#---------------------------------------------------
#------------------load libraries-------------------
#---------------------------------------------------
suppressPackageStartupMessages(library(doParallel))
suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(mvtnorm))
suppressPackageStartupMessages(library(ggplot2))
#------------------------------------------------------------
#-----------computing marginal coverage of m-rLCP------------
#------------------------------------------------------------
mrand_onerep=function(k,d,setting){
#----------training data and learning score------------
train_data=simulation(ntrain,d,setting)
Xnames=paste("X", 1:d, sep="")
formula=as.formula(paste("Y ~ ", paste(Xnames, collapse= "+")))
model_lm=lm(formula,data=train_data)
#----------calibration data--------------------------
calib_data=simulation(ncalib,d,setting)
Xcalib=as.matrix(calib_data[,-1])
scores_calib=abs(calib_data$Y-predict(model_lm,newdata=calib_data))
#-------------test data------------------------------
test_data=simulation(ntest,d,setting)
Xtest=as.matrix(test_data[,-1])
scores_test=abs(test_data$Y-predict(model_lm,newdata=test_data))
#-----------evaluating the competing methods-----------
m_rLCP_res=mRLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha,100)
rLCP_res=RLCP(Xcalib,scores_calib,Xtest,scores_test,"gaussian",h,alpha)
#----------coverage-----------------------
coverage1=apply(m_rLCP_res,2,mean)
coverage2=mean(rLCP_res[,1])
return(c(coverage1,coverage2))
}
#--------------------------------------------------------------------
#-----------------------multivariate experiments---------------------
#--------------------------------------------------------------------
#choice of dimensions
dseq=c(1,5*1:4)
numcores=detectCores()-1
cl=makeCluster(numcores)
registerDoParallel(cl)
hseq=c(0.5,1,1.5)
#setting up the experiments
setting=1;ntrain=2000;ncalib=2000;ntest=2000
nrep=30;alpha=0.1
result1=matrix(0,nrow=5*3,ncol=24)
id=1
for(j in 1:3){
h=hseq[j]
for(l in 1:5){
d=dseq[l]
print(c(h,d))
result_h=foreach(k=1:nrep,.combine=rbind,
.packages = c("MASS","parallel","doParallel",
"foreach","mvtnorm")) %dopar% {
mrand_onerep(k,d,setting)
}
result1[id,]=c(colMeans(result_h),apply(result_h,2,sd)/sqrt(nrep),d,h)
print(result1[id,])
id=id+1
}
}
stopCluster(cl)
write.csv(result1,"../results/setting_1_mrand_d.csv")
#---------------------------------------------------
#----------------Visualization----------------------
#---------------------------------------------------
result=read.csv(paste0("../results/setting_1_mrand_d",".csv"))[,-1]
plot_result=matrix(0,nrow=length(hseq)*length(dseq)*11,ncol=5)
id=1
for(i in 1:length(hseq)){
for(j in 1:length(dseq)){
plot_result[((id-1)*11+1):(id*11),1]=result1[id,1:11]
plot_result[((id-1)*11+1):(id*11),2]=result1[id,12:22]
plot_result[((id-1)*11+1):(id*11),3]=result1[id,23]
plot_result[((id-1)*11+1):(id*11),4]=result1[id,24]
plot_result[((id-1)*11+1):(id*11),5]=c(10*1:10,1)
id=id+1
}
}
plot_result=as.data.frame(plot_result)
colnames(plot_result)=c("coverage","se","dimension","bandwidth","m")
plot_result$m=as.factor(plot_result$m)
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(.~bandwidth,labeller=label_bquote(h ==.(bamdwidth)))+
theme(plot.title = element_text(hjust=0.5))
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_grid(.~bandwidth,labeller=label_quote(h ==.(bamdwidth)))+
theme(plot.title = element_text(hjust=0.5))
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bamdwidth)))+
theme(plot.title = element_text(hjust=0.5))
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust=0.5))
pdf(file="../results/mRLCP_coverage_results.pdf",
width=12,height=4)
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust=0.5))
dev.off()
pdf(file="../results/figures/mRLCP_coverage_results.pdf",
width=12,height=4)
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust=0.5))
dev.off()
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
strip.text = element_text(size = 15),
axis.text=element_text(size=15),
axis.title=element_text(size=15))+
dev.off()
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
strip.text = element_text(size = 15),
axis.text=element_text(size=15),
axis.title=element_text(size=15))+
dev.off()
dev.off()
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
strip.text = element_text(size = 15),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust = 0.5),
strip.text = element_text(size = 15),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
pdf(file="../results/figures/mRLCP_coverage_results.pdf",
width=12,height=4)
ggplot(plot_result[plot_result$m %in% c(1,10,30,60,100),], aes(x=dimension, y = coverage, col=m)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=coverage-se, ymax=coverage+se), width=.02,
position=position_dodge(0.01))+
geom_hline(yintercept=0.9,linetype="dashed")+
facet_wrap(.~bandwidth,labeller=label_bquote(h ==.(bandwidth)))+
theme(plot.title = element_text(hjust = 0.5),
strip.text = element_text(size = 15),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
dev.off()
#--------------------------------------------------------------
#---------------------------visualization----------------------
#--------------------------------------------------------------
deviation_est=read.csv("../results/simul_deviation_estimates.csv")[,-1]
deviation_simul_df=c(unlist(deviation_est[1,]),unlist(deviation_est[2,]))
deviation_simul_df=cbind(deviation_simul_df,rep(hseq,2))
deviation_simul_df=cbind(deviation_simul_df,rep(c(1,2),each=length(hseq)))
hseq=seq(0.1,2.1,by=0.2)
#--------------------------------------------------------------
#---------------------------visualization----------------------
#--------------------------------------------------------------
deviation_est=read.csv("../results/simul_deviation_estimates.csv")[,-1]
deviation_simul_df=c(unlist(deviation_est[1,]),unlist(deviation_est[2,]))
deviation_simul_df=cbind(deviation_simul_df,rep(hseq,2))
deviation_simul_df=cbind(deviation_simul_df,rep(c(1,2),each=length(hseq)))
deviation_simul_df=as.data.frame(deviation_simul_df)
colnames(deviation_simul_df)=c("deviation","h","setting")
deviation_simul_df$setting=as.factor(deviation_simul_df$setting)
deviation_simul_df$deviation=as.numeric(deviation_simul_df$deviation)
deviation_simul_df$h=as.numeric(deviation_simul_df$h)
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
suppressPackageStartupMessages(library(ggplot2))
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_simul
deviation_simul=ggplot(deviation_simul_df,aes(x=h,y=deviation,linetype=setting))+
geom_line()+geom_point()+
scale_linetype_manual(values=c("1"="dotted","2"="dashed"))+
labs(x="Bandwidth h",y=expression(D(h)),linetype="Setting")+
ggtitle("Deviation D(h) of RLCP in simulation settings")+
theme(axis.title = element_text(size = 16),
axis.text = element_text(size=16),
plot.title = element_text(hjust = 0.5,size=16),
legend.position = "bottom",
legend.text = element_text(size=14))
deviation_simul
